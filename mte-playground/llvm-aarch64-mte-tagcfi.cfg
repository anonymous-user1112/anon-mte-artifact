# This is a sample config file for CPU2006. It was tested with:
#
#      Compiler name/version:       [gcc,g++,gfortran 4.3 release]
#      Operating system version:    [SLES 10 SP1 for AMD64]
#      Hardware:                    [Opteron]
#
# If your platform uses different versions, different
# hardware or operates in a different mode (for
# example, 32- vs. 64-bit mode), there is the possibiliy
# that this configuration file may not work as-is.
#
# Note that issues with compilation should be directed
# to the compiler vendor. Information about SPEC techncial
# support can be found in the techsupport document in the
# Docs directory of your benchmark installation.
#
# Also note that this is a sample configuration. It
# is expected to work for the environment in which
# it was tested; it is not guaranteed that this is
# the config file that will provide the best performance.

# Note that you might find a more recent config file for
# your platform with the posted results at
# www.spec.org/cpu2006
####################################################################
# AMD64 (64-bit) FSF's gcc 4.3 config file 
# Sample Config file for CPU2006 
#####################################################################
# %define ROOTDIR $[top]/../../..
%define ROOTDIR /home/XXXXXXXX/code/llvm-mte
%define BINDIR %{ROOTDIR}/tagcfi/build/bin
%define DLDIR %{ROOTDIR}/tagcfi/downloads
%define TAGCFIRTDIR %{ROOTDIR}/tagcfi/build/lib/clang/18/lib/aarch64-unknown-linux-gnu/
%define RAL_SYSLIBDIR %{ROOTDIR}/tagcfi/install/ral
%define VTT_SYSLIBDIR %{ROOTDIR}/tagcfi/install/vtt
%define IFCT_SYSLIBDIR %{ROOTDIR}/tagcfi/install/ifct
%define SCS_SYSLIBDIR %{ROOTDIR}/tagcfi/install/scs
%define DEFAULT_SYSLIBDIR %{ROOTDIR}/tagcfi/install/default

ignore_errors = yes
tune          = base
ext           = llvm-aarch64-mte-tagcfi
output_format = asc, csv, Screen
reportable    = 1
teeout        = yes
teerunout     = yes
hw_avail = Dec-9999
license_num = 0
test_sponsor =
prepared_by = 
tester      =

GCC_TOOLCHAIN = %{DLDIR}/gcc/gcc-linaro-12.3.1-2023.06-x86_64_aarch64-linux-gnu/
SYSROOT = %{DLDIR}/gcc/gcc-linaro-12.3.1-2023.06-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/
use_submit_for_speed = 1

%ifdef %{ON_VM}
  submit      = qemu-aarch64 -L ${SYSROOT} ${command}
%elif %{CORE}
  submit      = bench_runner %{CORE} ${command}
%endif

%ifdef %{LOADER}
%ifdef %{PASS_ENV}
  submit    = %{LOADER} env %{PASS_ENV} ${command}
%else
  submit    = %{LOADER} ${command}
%endif
%endif

default=default=default=default:
#####################################################################
#
# Compiler selection
#
#####################################################################
%ifdef %{WRAPCC}
CC           = %{WRAPCC} %{BINDIR}/clang
CXX          = %{WRAPCC} %{BINDIR}/clang++
%else
CC           = %{BINDIR}/clang
CXX          = %{BINDIR}/clang++
%endif
FC           = /usr/bin/gfortran

## HW config
hw_model     =
hw_cpu_name  =
hw_cpu_char  =
hw_cpu_mhz   =
hw_fpu       =
hw_nchips	=
hw_ncores	=
hw_ncoresperchip=
hw_nthreadspercore =
hw_ncpuorder =
hw_pcache    =
hw_scache    =
hw_tcache    =
hw_ocache    =
hw_memory	=
hw_disk  	=
hw_vendor	=
hw_other	=

## SW config
sw_os        = QEMU AArch64 Usermode
sw_file      =
sw_state     =
sw_compiler  = clang
sw_avail = Mar-2008
sw_other = None
sw_base_ptrsize = 64-bit
sw_peak_ptrsize = Not Applicable

#####################################################################
# Custom Variables
#####################################################################

STATIC = -static -unwindlib=libunwind
ARCH_SELECT = --target=aarch64-linux-gnu -march=armv8-a+memtag --gcc-toolchain=${GCC_TOOLCHAIN}
# ARCH_SELECT = --target=aarch64-linux-gnu -march=armv8-a+memtag -rtlib=compiler-rt

COMMON_RTLIB = -Wl,--whole-archive %{TAGCFIRTDIR}/libclang_rt.tagcfi-common.a -Wl,--no-whole-archive
RAL_RTLIB = -Wl,--whole-archive %{TAGCFIRTDIR}/libclang_rt.tagcfi-ral.a -Wl,--no-whole-archive
VTT_RTLIB = -Wl,--whole-archive %{TAGCFIRTDIR}/libclang_rt.tagcfi-vtt.a -Wl,--no-whole-archive
IFCT_RTLIB = -Wl,--whole-archive %{TAGCFIRTDIR}/libclang_rt.tagcfi-ifct.a -Wl,--no-whole-archive
TAGSCS_RTLIB = -Wl,--whole-archive %{TAGCFIRTDIR}/libclang_rt.tagcfi-scs.a -Wl,--no-whole-archive
TAGCFI_V2_RTLIB = -Wl,--whole-archive %{TAGCFIRTDIR}/libclang_rt.tagcfi-v2.a -Wl,--no-whole-archive

#########################
# Variables for DEFAULT #
#########################

DEFAULT_STDCXX_CXXFLAGS = -nostdinc++ -isystem %{DEFAULT_SYSLIBDIR}/include/c++/12.2.0 -isystem %{DEFAULT_SYSLIBDIR}/include/c++/12.2.0/aarch64-linux-gnu -isystem %{DEFAULT_SYSLIBDIR}/include/c++/12.2.0/backward/ -nostdlib++ 
# For whatever reason, it doesn't need any -lstdc++ ??? (if I add, it causes a double link and symbol conflicts)
DEFAULT_STDCXX_LDFLAGS = -L %{DEFAULT_SYSLIBDIR}/lib -Wl,-rpath,%{DEFAULT_SYSLIBDIR}/lib
DEFAULT_GLIBC = %{DEFAULT_SYSLIBDIR}/lib/libc.a

#########################
# Variables for RAL     #
#########################

RAL_PASS_FULL = -mllvm -tagcfi-retlock
RAL_PASS_HALF = -mllvm -tagcfi-retlock -mllvm --sw-tag-excl=0
RAL_DEBUG_PASS = -mllvm -debug-only=aarch64-tagcfi-retlock -ggdb
RAL_ADD_TAGCHECK = -mllvm --tagcheck-at-epilog
RAL_GLIBC = %{RAL_SYSLIBDIR}/lib/libc.a

#########################
# Variables for VTT     #
#########################

# VTT_LIBCXX = -nostdinc++ -isystem %{VTT_SYSLIBDIR}/include/c++/v1 -nostdlib++ -L %{VTT_SYSLIBDIR}/lib -lc++ -lc++abi -Wl,-rpath,%{VTT_SYSLIBDIR}/lib
VTT_STDCXX_CXXFLAGS = -nostdinc++ -isystem %{VTT_SYSLIBDIR}/include/c++/12.2.0 -isystem %{VTT_SYSLIBDIR}/include/c++/12.2.0/aarch64-linux-gnu -isystem %{VTT_SYSLIBDIR}/include/c++/12.2.0/backward/ -nostdlib++
VTT_STDCXX_LDFLAGS = -L %{VTT_SYSLIBDIR}/lib -Wl,-rpath,%{VTT_SYSLIBDIR}/lib
VTT_PASS = -mllvm --tagcfi-extended-vt -mllvm --tagcfi-vtt
VTT_DEBUG_PASS = -mllvm -debug-only=tagcfi-vtt -ggdb

#########################
# Variables for IFCT    #
#########################

IFCT_MUSL = -static-libgcc -nostdinc --sysroot %{IFCT_SYSLIBDIR} -isystem %{IFCT_SYSLIBDIR}/include -L %{IFCT_SYSLIBDIR}/lib
IFCT_STDCXX_CXXFLAGS = -nostdinc++ -isystem %{IFCT_SYSLIBDIR}/include/c++/12.2.0 -isystem %{IFCT_SYSLIBDIR}/include/c++/12.2.0/aarch64-linux-gnu -isystem %{IFCT_SYSLIBDIR}/include/c++/12.2.0/backward/ -nostdlib++
IFCT_STDCXX_LDFLAGS = -L %{IFCT_SYSLIBDIR}/lib -Wl,-rpath,%{IFCT_SYSLIBDIR}/lib
IFCT_PASS = -mllvm --tagcfi-ifct-clang -mllvm --tagcfi-ifct
IFCT_DEBUG_PASS = -mllvm -debug-only=tagcfi-ifct -ggdb

#########################
# Variables for SCS     #
#########################

SCS_GLIBC = %{SCS_SYSLIBDIR}/lib/libc.a
#SCS_MUSL = -static-libgcc -nostdinc --sysroot %{SCS_SYSLIBDIR} -isystem %{SCS_SYSLIBDIR}/include -L %{SCS_SYSLIBDIR}/lib
SCS_STDCXX_CXXFLAGS = -nostdinc++ -isystem %{SCS_SYSLIBDIR}/include/c++/12.2.0 -isystem %{SCS_SYSLIBDIR}/include/c++/12.2.0/aarch64-linux-gnu -isystem %{SCS_SYSLIBDIR}/include/c++/12.2.0/backward/ -nostdlib++ 
SCS_STDCXX_LDFLAGS = -L %{SCS_SYSLIBDIR}/lib -Wl,-rpath,%{SCS_SYSLIBDIR}/lib

SCUDO_FLAGS = -fsanitize=scudo
VTV_PASS = -flto -fvisibility=default -fsanitize=cfi-vcall
IFCC_PASS = -flto -fvisibility=default -fsanitize=cfi-icall -fsanitize-ignorelist=%{ROOTDIR}/tagcfi/playground/ignorelist.txt

#####################################################################
# Optimization
#####################################################################

## NOTE: ARCH_SELECT might be better at CPUFLAGS once we are ready for pixel 8
default=default=default=default:
COPTIMIZE    = -O2 -fno-strict-aliasing ${ARCH_SELECT}
CXXOPTIMIZE  = -O2 -fno-strict-aliasing ${ARCH_SELECT}
# dont care if CINT
FOPTIMIZE    = -O2 -fno-strict-aliasing

#####################################################################
# Extensions - default, half, full, full-debug
# usage: runspec ... -e default,ral-full,vtt ...
#####################################################################
# target=tuning=extension

#########################
# DEFAULTs              #
#########################
default=default=default:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS = -unwindlib=libunwind

default=default=default-x3:
EXTRA_CFLAGS = -std=gnu89 -mcpu=cortex-x3
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS = -unwindlib=libunwind

default=default=default-x3-sched-fix:
EXTRA_CFLAGS = -std=gnu89 -mcpu=cortex-x3-mte
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS = -unwindlib=libunwind

default=default=default-pretag:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS = -L %{DLDIR}/glibc-2.36/.build-pretag/ -l:libc.so -unwindlib=libunwind

default=default=default-debug:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS =
EXTRA_OPTIMIZE = -ggdb

default=default=default-static:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS = ${DEFAULT_GLIBC} ${STATIC}
# preENV_GLIBC_TUNABLES = glibc.mem.tagging=3
#
default=default=hakc:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98
EXTRA_LDFLAGS = ${STATIC} -L %{DLDIR}/glibc/.build-hakc/ -l:libc.a -unwindlib=libunwind

default=default=hakc-sfitag:
EXTRA_CFLAGS = -std=gnu89 -ffixed-x18 -mllvm -aarch64-enable-compress-jump-tables=0
EXTRA_CXXFLAGS = -std=c++98 -ffixed-x18 -mllvm -aarch64-enable-compress-jump-tables=0
EXTRA_LDFLAGS = ${STATIC} -L %{DLDIR}/glibc/.build-hakc/ -l:libc.a -unwindlib=libunwind

#### BASELINE ##########
default=default=default-custom-glibc-libstdcxx-static:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98 ${DEFAULT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${DEFAULT_STDCXX_LDFLAGS} -Wl,--verbose
EXTRA_OPTIMIZE = ${DEFAULT_GLIBC} ${STATIC}

default=default=baseline-lto:
EXTRA_CFLAGS = -std=gnu89
EXTRA_CXXFLAGS = -std=c++98 ${DEFAULT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${DEFAULT_GLIBC} ${STATIC} ${DEFAULT_STDCXX_LDFLAGS} -Wl,--verbose
EXTRA_OPTIMIZE = -flto

#########################
# TagSCS                #
#########################
default=default=tagscs-static:
EXTRA_CFLAGS = -std=gnu89 -fsanitize=shadow-call-stack -ffixed-x18
EXTRA_CXXFLAGS = -std=c++98 -fsanitize=shadow-call-stack -ffixed-x18 ${SCS_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${TAGSCS_RTLIB} ${SCS_GLIBC} ${SCS_STDCXX_LDFLAGS}

#########################
# VTT                   #
#########################
all_cpp=default=vtt-static:
EXTRA_CXXFLAGS = -std=c++98 ${VTT_PASS} ${VTT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${VTT_RTLIB} ${DEFAULT_GLIBC} ${VTT_STDCXX_LDFLAGS}

all_cpp=default=vtt-debug:
EXTRA_CXXFLAGS = -std=c++98 ${VTT_PASS} ${VTT_DEBUG_PASS} ${VTT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${VTT_RTLIB} ${DEFAULT_GLIBC} ${VTT_STDCXX_LDFLAGS}

#########################
# IFCT                  #
#########################
default=default=ifct-static:
EXTRA_CFLAGS = -std=gnu89 ${IFCT_PASS}
EXTRA_CXXFLAGS = -std=c++98 ${IFCT_PASS} ${IFCT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${IFCT_RTLIB} ${DEFAULT_GLIBC} ${IFCT_STDCXX_LDFLAGS}

default=default=ifct-debug:
EXTRA_CFLAGS = -std=gnu89 ${IFCT_PASS} ${IFCT_DEBUG_PASS}
EXTRA_CXXFLAGS = -std=c++98 ${IFCT_PASS} ${IFCT_DEBUG_PASS} ${IFCT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${IFCT_RTLIB} ${DEFAULT_GLIBC} ${IFCT_STDCXX_LDFLAGS}

#########################
# VTT+IFCT (TODO)       #
#########################
#all_cpp=default=ifct-vtt-static:
#EXTRA_CXXFLAGS = -std=c++98 ${VTT_PASS} ${IFCT_PASS} ${VTT_STDCXX_CXXFLAGS} ${IFCT_STDCXX_CXXFLAGS}
#EXTRA_OPTIMIZE = ${STATIC}
#EXTRA_LDFLAGS = ${IFCT_RTLIB} ${VTT_RTLIB}

#########################
# RALs                  #
#########################
default=default=ral-half:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_HALF}
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_HALF}
EXTRA_LDFLAGS = ${COMMON_RTLIB}

default=default=ral-half-static:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_HALF}
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_HALF}
EXTRA_OPTIMIZE = ${STATIC}
EXTRA_LDFLAGS = ${COMMON_RTLIB}

default=default=ral-full:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_FULL}
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_FULL}
EXTRA_LDFLAGS = ${COMMON_RTLIB}

default=default=ral-full-debug:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_FULL} ${RAL_DEBUG_PASS}
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_FULL} ${RAL_DEBUG_PASS}
EXTRA_LDFLAGS = ${COMMON_RTLIB}

default=default=ral-full-static:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_FULL}
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_FULL}
EXTRA_OPTIMIZE = ${STATIC}
EXTRA_LDFLAGS = ${COMMON_RTLIB}

default=default=ral-half-tagcheck-static:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_HALF} ${RAL_ADD_TAGCHECK} -mllvm --aarch64-stack-record-align=16
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_HALF} ${RAL_ADD_TAGCHECK} -mllvm --aarch64-stack-record-align=16
EXTRA_LDFLAGS = ${RAL_GLIBC} ${RAL_RTLIB} ${STATIC}

default=default=ral-half-tagcheck32-static:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_HALF} ${RAL_ADD_TAGCHECK} -mllvm --ral-st2g -mllvm --aarch64-stack-record-align=32
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_HALF} ${RAL_ADD_TAGCHECK} -mllvm --ral-st2g -mllvm --aarch64-stack-record-align=32
EXTRA_LDFLAGS = ${RAL_GLIBC} ${RAL_RTLIB} ${STATIC}

default=default=ral-full-tagcheck-static:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_FULL} ${RAL_ADD_TAGCHECK} -mllvm --aarch64-stack-record-align=16
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_FULL} ${RAL_ADD_TAGCHECK} -mllvm --aarch64-stack-record-align=16
EXTRA_LDFLAGS = ${RAL_GLIBC} ${RAL_RTLIB} ${STATIC}

default=default=ral-full-tagcheck32-static:
EXTRA_CFLAGS = -std=gnu89 ${RAL_PASS_FULL} ${RAL_ADD_TAGCHECK} -mllvm --ral-st2g -mllvm --aarch64-stack-record-align=32
EXTRA_CXXFLAGS = -std=c++98 ${RAL_PASS_FULL} ${RAL_ADD_TAGCHECK} -mllvm --ral-st2g -mllvm --aarch64-stack-record-align=32
EXTRA_LDFLAGS = ${RAL_GLIBC} ${RAL_RTLIB} ${STATIC}

#########################
# CLANG-CFI             #
#########################

default=default=clang-ifcc-static:
EXTRA_CFLAGS = -std=gnu89 ${IFCC_PASS}
EXTRA_CXXFLAGS = -std=c++98 ${IFCC_PASS} ${DEFAULT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${DEFAULT_GLIBC} ${DEFAULT_STDCXX_LDFLAGS}

default=default=clang-vtv-static:
EXTRA_CFLAGS = -std=gnu89 ${VTV_PASS}
EXTRA_CXXFLAGS = -std=c++98 ${VTV_PASS} ${DEFAULT_STDCXX_CXXFLAGS}
EXTRA_LDFLAGS = ${STATIC} ${DEFAULT_GLIBC} ${DEFAULT_STDCXX_LDFLAGS}

#########################
# TagCFI-v2             #
#########################

default=default=tagcfi-v2-static:
EXTRA_CFLAGS = -std=gnu89 ${IFCC_PASS} 
EXTRA_CXXFLAGS = -std=c++98 ${DEFAULT_STDCXX_CXXFLAGS} ${IFCC_PASS}
EXTRA_LDFLAGS = ${STATIC} ${DEFAULT_GLIBC} ${DEFAULT_STDCXX_LDFLAGS} -Wl,-mllvm,--tagcfi-v2 ${TAGCFI_V2_RTLIB}

#####################################################################
# 32/64 bit Portability Flags - all
#####################################################################

default=default=default=default:
PORTABILITY = -DSPEC_CPU_LP64 -Wno-int-conversion

#####################################################################
# Portability Flags
#####################################################################
400.perlbench=default=default=default:
CPORTABILITY = -DSPEC_CPU_LINUX_X64

462.libquantum=default=default=default:
CPORTABILITY=  -DSPEC_CPU_LINUX

483.xalancbmk=default=default=default:
CXXPORTABILITY= -DSPEC_CPU_LINUX

481.wrf=default=default=default:
CPORTABILITY = -DSPEC_CPU_CASE_FLAG -DSPEC_CPU_LINUX

464.h264ref=default=default=default:
CPORTABILITY = -fsigned-char

471.omnetpp=default=default=default:
LDPORTABILITY = -unwindlib=libunwind

483.xalancbmk=default=default=default:
LDPORTABILITY = -unwindlib=libunwind

447.dealII=default=default=default:
CXXPORTABILITY = -include cstdlib -include cstring -include cstddef
